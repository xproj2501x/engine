/**
 * Game - Game
 * ===
 *
 * @module game
 */

////////////////////////////////////////////////////////////////////////////////
// Imports
////////////////////////////////////////////////////////////////////////////////
import { COMPONENT_TYPES, COMPONENTS } from "./components";
import { ASSEMBLAGE_TYPES, ASSEMBLAGES } from "./assemblages";

////////////////////////////////////////////////////////////////////////////////
// Definitions
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Class
////////////////////////////////////////////////////////////////////////////////
/**
 * Game
 * @class
 * @memberof module:game
 */
class Game {

  //////////////////////////////////////////////////////////////////////////////
  // Private Properties
  //////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////
  // Public Properties
  //////////////////////////////////////////////////////////////////////////////
  constructor() {

  }

  //////////////////////////////////////////////////////////////////////////////
  // Public Methods
  //////////////////////////////////////////////////////////////////////////////
  create() {
    const ASSEMBLAGES = [];
    const HEIGHT = 25;
    const WIDTH = 25;
    const TIME_ASSEMBLAGE = {
      type: ASSEMBLAGE_TYPES.TIME_ASSEMBLAGE
    };

    ASSEMBLAGES.push(TIME_ASSEMBLAGE);
    let counter = 0;
    for (let idx = 0; idx < WIDTH; idx++) {
      for (let jdx = 0; jdx < HEIGHT; jdx++) {
        const ASSEMBLAGE = {};
        const POSITION_COMPONENT = {
          X_POSITION: idx,
          Y_POSITION: jdx,
        };

        ASSEMBLAGE.type = ASSEMBLAGE_TYPES.CELL_ASSEMBLAGE;
        ASSEMBLAGE.state = {};
        ASSEMBLAGE.state[COMPONENT_TYPES.POSITION_COMPONENT] = POSITION_COMPONENT;

        const ALIVE = this._isAlive();
        if (ALIVE) {
          counter++;
          ASSEMBLAGE.state[COMPONENT_TYPES.HEALTH_COMPONENT] = {
            MAX_HEALTH: 0,
            CURRENT_HEALTH: 1
          }
        }
        ASSEMBLAGES.push(ASSEMBLAGE);
      }
    }
    return ASSEMBLAGES;
  }

  //////////////////////////////////////////////////////////////////////////////
  // Private Methods
  //////////////////////////////////////////////////////////////////////////////
  _isAlive() {
    const MIN = 1;
    const MAX = 100;
    const CHANCE = Math.floor(Math.random() * (MAX - MIN)) + MIN;

    return (CHANCE > 75);
  }
}

////////////////////////////////////////////////////////////////////////////////
// Exports
////////////////////////////////////////////////////////////////////////////////
export default Game;
