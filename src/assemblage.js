/**
 * Engine - Assemblage
 * ===
 *
 * @module assemblage
 */

////////////////////////////////////////////////////////////////////////////////
// Imports
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Definitions
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Class
////////////////////////////////////////////////////////////////////////////////
/**
 * Assemblage
 * @class
 * @memberof module:engine
 */
class Assemblage {

  //////////////////////////////////////////////////////////////////////////////
  // Private Properties
  //////////////////////////////////////////////////////////////////////////////
  /**
   * The root entity
   * @type { module:engine.Entity }
   */
  _entity;

  /**
   * The assemblage type
   * @type { string }
   */
  _type;

  /**
   * @type { boolean }
   */
  _isFlagged;
  //////////////////////////////////////////////////////////////////////////////
  // Public Properties
  //////////////////////////////////////////////////////////////////////////////

  /**
   * Get _entity.id
   * @readonly
   * @return { int }
   */
  get id() {
    return this._entity.id;
  }

  /**
   * Get _type
   * @readonly
   * @return { string }
   */
  get type() {
    return this._type;
  }

  /**
   * Assemblage
   * @param { module:engine.Entity } entity - the root entity for the assemblage
   * @param { string } type - the assemblage type
   */
  constructor(entity, type) {
    this._entity = entity;
    this._type = type;
  }

  //////////////////////////////////////////////////////////////////////////////
  // Public Methods
  //////////////////////////////////////////////////////////////////////////////
  /**
   * Find component of specified type
   * @param { string } type -
   * @return { module:engine.Component }
   */
  findComponent(type) {
    try {
      return this._entity.findComponent(type);
    } catch (err) {
      this._isFlagged = true;
      throw err;
    }
  }

  //////////////////////////////////////////////////////////////////////////////
  // Private Methods
  //////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////
  // Private Methods
  //////////////////////////////////////////////////////////////////////////////
  /**
   * Static factory method
   * @param { module:engine.Entity } entity - the root entity for the assemblage
   * @param { string } type - the assemblage type
   * @return {module:engine.Assemblage}
   */
  static create(entity, type) {
    return new Assemblage(entity, type);
  }
}

////////////////////////////////////////////////////////////////////////////////
// Exports
////////////////////////////////////////////////////////////////////////////////
export default Assemblage;
